/*
 * monolith-microservice-shop
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type OrdersAddress struct {

	Name string `json:"name"`

	Street string `json:"street"`

	City string `json:"city"`

	PostCode string `json:"post_code"`

	Country string `json:"country"`
}

// AssertOrdersAddressRequired checks if the required fields are not zero-ed
func AssertOrdersAddressRequired(obj OrdersAddress) error {
	elements := map[string]interface{}{
		"name": obj.Name,
		"street": obj.Street,
		"city": obj.City,
		"post_code": obj.PostCode,
		"country": obj.Country,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseOrdersAddressRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of OrdersAddress (e.g. [][]OrdersAddress), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseOrdersAddressRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aOrdersAddress, ok := obj.(OrdersAddress)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertOrdersAddressRequired(aOrdersAddress)
	})
}
